.. _expressions:

Expressions
===========

概要
----

数式を記述するための機能を提供する。

* ヘッダ

.. code-block:: cpp

   #include <tlnc/expressions.hpp>

.. toctree::
   :maxdepth: 2

   usage

関数一覧
--------

いずれも\ ``tlnc``\ 名前空間に属する。
詳しい使い方は\ :ref:`expr-usage`\ を参照。

特に説明のない関数は、
引数として\ ``double``\ 型や\ ``kv::interval<double>``\ 等の通常の値型を渡すと
:ref:`generic`\ の関数と同様の動作をする。
いずれの関数も引数として式を渡すと数式となる。

.. cpp:function:: cos(Expr &&)

.. cpp:function:: sin(Expr &&)

.. cpp:function:: tan(Expr &&)

.. cpp:function:: log(Expr &&)

.. cpp:function:: pow(Base &&, Exponent &&)

.. cpp:function:: prod(Expr1 &&, Expr2 &&)

   Boost.uBLASの\ ``prod``\ と同様な動作をする。
   ベクトルや行列の積を計算する。

.. cpp:function:: element_prod(Expr1 &&, Expr2 &&)

   Boost.uBLASの\ ``element_prod``\ と同様な動作をする。
   同じ大きさのベクトルや行列を渡すと要素ごとの積を計算する。

.. cpp:function:: at<Is...>(Expr &&)

   ベクトルや行列を返す式を受け取り、
   式の評価結果から\ ``Is...``\ 要素を取り出す式を返す。
   ``Is...``\ が1個の時はベクトルを返す式を、
   ``Is...``\ が2個の時は行列を返す式を渡さなければならない。

変数一覧
--------

いずれも\ ``tlnc``\ 名前空間に属する。
詳しい使い方は\ :ref:`expr-usage`\ を参照。

.. cpp:var:: unspecified x<Is...>

   ``std::size_t``\ 型の非型テンプレートパラメータ\ ``Is...``\ を受け取る変数テンプレート。
   ``Is...``\ が空の時は引数そのものを表し、
   ``Is...``\ が1個の時は引数として渡されるベクトルのある要素を表し、
   ``Is...``\ が2個の時は引数として渡される行列のある要素を指す。
   ``Is...``\ が3個以上の時はコンパイルエラーとなる。

.. cpp:var:: unspecified _1

   プレースホルダーを表す。同様の変数が\ ``_10``\ まで定義されている。
   使い方は\ :ref:`expr-usage-placeholders`\ を参照。

.. cpp:var:: unspecified holder<I>

   プレースホルダーが10個で足りないときに使う。
